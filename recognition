import dlib
import cv2
import numpy as np

# Load Dlib's face detector and face recognition model
detector = dlib.get_frontal_face_detector()
shape_predictor = dlib.shape_predictor('shape_predictor_68_face_landmarks.dat')
face_rec_model = dlib.face_recognition_model_v1('dlib_face_recognition_resnet_model_v1.dat')

def get_face_embedding(image, detected_face):
    shape = shape_predictor(image, detected_face)
    face_embedding = face_rec_model.compute_face_descriptor(image, shape)
    return np.array(face_embedding)

def recognize_faces(image_path, known_faces, known_names):
    img = cv2.imread(image_path)
    gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)
    detected_faces = detector(gray, 1)

    for face in detected_faces:
        embedding = get_face_embedding(img, face)
        
        # Find the closest known face
        distances = np.linalg.norm(known_faces - embedding, axis=1)
        min_distance = np.argmin(distances)
        if distances[min_distance] < 0.6:  # Threshold for recognition
            name = known_names[min_distance]
            (x, y, w, h) = (face.left(), face.top(), face.width(), face.height())
            cv2.rectangle(img, (x, y), (x + w, y + h), (0, 255, 0), 2)
            cv2.putText(img, name, (x, y - 10), cv2.FONT_HERSHEY_SIMPLEX, 0.9, (0, 255, 0), 2)
        else:
            (x, y, w, h) = (face.left(), face.top(), face.width(), face.height())
            cv2.rectangle(img, (x, y), (x + w, y + h), (0, 0, 255), 2)
            cv2.putText(img, "Unknown", (x, y - 10), cv2.FONT_HERSHEY_SIMPLEX, 0.9, (0, 0, 255), 2)

    cv2.imshow('Recognized Faces', img)
    cv2.waitKey(0)
    cv2.destroyAllWindows()

# Example usage
known_faces = []
known_names = []

# Add known faces (this should be done in a real application setup phase)
# For instance:
# known_faces.append(get_face_embedding(image, detected_face))
# known_names.append("Person Name")

recognize_faces('path_to_image.jpg', known_faces, known_names)
